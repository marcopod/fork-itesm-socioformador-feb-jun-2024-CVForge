generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ai_response {
  ai_response_id String    @id @db.Uuid
  plain_text     String?
  cv_id          String?   @unique @db.Uuid
  tokens         Decimal?  @db.Decimal
  request_date   DateTime? @db.Timestamptz(6)
  cv             cv?       @relation(fields: [cv_id], references: [cv_id], onDelete: NoAction, onUpdate: NoAction)
}

model cv {
  cv_id               String            @id @db.Uuid
  user_id             String?           @db.Uuid
  cv_insight_id       String?           @unique @db.Uuid
  desired_position_id String?           @unique @db.Uuid
  ai_response         ai_response?
  cv_insight          cv_insight?       @relation(fields: [cv_insight_id], references: [cv_insight_id], onDelete: NoAction, onUpdate: NoAction)
  desired_position    desired_position? @relation(fields: [desired_position_id], references: [desired_position_id], onDelete: NoAction, onUpdate: NoAction)
  users               users?            @relation(fields: [user_id], references: [users_id], onDelete: NoAction, onUpdate: NoAction)
}

model cv_insight {
  cv_insight_id  String           @id @db.Uuid
  score          Int?
  cv             cv?
  recommendation recommendation[]
}

model desired_position {
  desired_position_id String  @id @db.Uuid
  title               String? @db.VarChar(25)
  description         String? @db.VarChar(500)
  company             String? @db.VarChar(20)
  years_experience    Int?
  cv                  cv?
}

model education {
  education_id         String                @id @db.Uuid
  school               String?               @db.VarChar(50)
  education_degree     String?               @db.VarChar(50)
  gpa                  Int?
  start_date           DateTime?             @db.Date
  end_date             DateTime?             @db.Date
  professional_info_id String?               @db.Uuid
  professional_info    professional_info?    @relation(fields: [professional_info_id], references: [professional_info_id], onDelete: NoAction, onUpdate: NoAction)
  relevant_coursework  relevant_coursework[]
}

model professional_info {
  professional_info_id String                 @id @db.Uuid
  user_id              String?                @unique @db.Uuid
  education            education[]
  users                users?                 @relation(fields: [user_id], references: [users_id], onDelete: NoAction, onUpdate: NoAction)
  programming_language programming_language[]
  project              project[]
  technology           technology[]
  work_experience      work_experience[]
}

model profile {
  profile_id    String    @id @db.Uuid
  user_id       String?   @unique @db.Uuid
  first_name    String?   @db.VarChar(50)
  last_name     String?   @db.VarChar(50)
  email         String    @db.VarChar(255)
  phone         String?   @db.VarChar(20)
  github_link   String?   @db.VarChar(255)
  linkedin_link String?   @db.VarChar(255)
  location      String?   @db.VarChar(255)
  birthdate     DateTime? @db.Date
  gender        String?   @db.VarChar(1)
  users         users?    @relation(fields: [user_id], references: [users_id], onDelete: NoAction, onUpdate: NoAction)
}

model programming_language {
  programming_language_id   String             @id @db.Uuid
  programming_language_name String?            @db.VarChar(50)
  proficiency               String?            @db.VarChar(50)
  professional_info_id      String?            @db.Uuid
  professional_info         professional_info? @relation(fields: [professional_info_id], references: [professional_info_id], onDelete: NoAction, onUpdate: NoAction)
}

model project {
  project_id           String             @id @db.Uuid
  name                 String?            @db.VarChar(50)
  description          String?            @db.VarChar(500)
  start_date           DateTime?          @db.Timestamptz(6)
  end_date             DateTime?          @db.Timestamptz(6)
  professional_info_id String?            @db.Uuid
  professional_info    professional_info? @relation(fields: [professional_info_id], references: [professional_info_id], onDelete: NoAction, onUpdate: NoAction)
}

model recommendation {
  recommendation_id String      @id @db.Uuid
  cv_insight_id     String?     @db.Uuid
  title             String?     @db.VarChar(50)
  main_content      String?
  cv_insight        cv_insight? @relation(fields: [cv_insight_id], references: [cv_insight_id], onDelete: NoAction, onUpdate: NoAction)
}

model relevant_coursework {
  relevant_coursework_id String     @id @db.Uuid
  education_id           String?    @db.Uuid
  course                 String?    @db.VarChar(100)
  education              education? @relation(fields: [education_id], references: [education_id], onDelete: NoAction, onUpdate: NoAction)
}

model technology {
  technology_id        String             @id @db.Uuid
  professional_info_id String?            @db.Uuid
  professional_info    professional_info? @relation(fields: [professional_info_id], references: [professional_info_id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  users_id          String             @id @db.Uuid
  email             String             @db.VarChar(50)
  password          String             @db.VarChar(60)
  verification      Boolean?
  is_active         Boolean?
  last_login        DateTime?          @db.Timestamptz(6)
  created_at        DateTime?          @db.Timestamptz(6)
  updated_at        DateTime?          @db.Timestamptz(6)
  cv                cv[]
  professional_info professional_info?
  profile           profile?
}

model work_experience {
  work_experience_id   String             @id @db.Uuid
  work_position        String?            @db.VarChar(50)
  description          String?            @db.VarChar(1000)
  start_date           DateTime?          @db.Date
  end_date             DateTime?          @db.Date
  professional_info_id String?            @db.Uuid
  professional_info    professional_info? @relation(fields: [professional_info_id], references: [professional_info_id], onDelete: NoAction, onUpdate: NoAction)
}
